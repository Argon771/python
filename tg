
import telebot
from telebot import types
import os

API_TOKEN = '1692231443:AAG0gzr6bqsz3JpsL89E9bA_Wvs6z_q4NSM'
ADMIN_ID = 825037592
bot = telebot.TeleBot(API_TOKEN)



@bot.message_handler(commands=['start'])
def start(message):

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è")
    btn2 = types.KeyboardButton('–ü–æ–º–æ—â—å')
    markup.add(btn1, btn2)
    bot.send_message(message.from_user.id, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ—â—å–Ω–∏–∫ –ê–ª–≥–æ—Ä–∏—Ç–º–∏–∫, —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ—Å–º–æ—Ç–µ—Ç—å —Å–∫–æ–ª—å–∫–æ –∞—Å—Ç—Ä–æ–∫–æ–∏–Ω–æ–≤ —É —Ç–≤–æ–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞", reply_markup=markup)
 

students_data = {
    "–í–ø_–í—Ç-18:30": {
        "–ê—Ä—Ç–µ–º": 0,
        "student2": 0
    },
    "–ö–ì_—Å–±-11": {
        "student3": 0,
        "student4": 0
    }
}
@bot.message_handler(commands=['start1'])
def start_command(message):
    show_group_selection(message.chat.id)

def show_group_selection(chat_id):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for group in students_data.keys():
        keyboard.add(types.KeyboardButton(group))
    #keyboard.add(types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–∞"))  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞
    keyboard.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    btn4 = types.KeyboardButton('–í –Ω–∞—á–∞–ª–æ')  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    keyboard.add(btn4)
    bot.send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:", reply_markup=keyboard)

@bot.message_handler(func=lambda message: message.text in students_data.keys())
def show_students(message):
    group_name = message.text
    students = students_data[group_name]
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—á–µ–Ω–∏–∫–∞
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for student in students.keys():
        keyboard.add(types.KeyboardButton(student))
    keyboard.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))
    btn4 = types.KeyboardButton('–í –Ω–∞—á–∞–ª–æ')  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    keyboard.add(btn4)
    bot.send_message(message.chat.id, f"–°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø–µ {group_name}:\n–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞:", reply_markup=keyboard)

@bot.message_handler(func=lambda message: any(message.text in students_data[group] for group in students_data.keys()))
def show_student_info(message):
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —É—á–µ–Ω–∏–∫–µ
    for group, students in students_data.items():
        if message.text in students:
            value = students[message.text]
            bot.send_message(message.chat.id, f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {message.text}:\n–ó–Ω–∞—á–µ–Ω–∏–µ: {value}")
            # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –≥—Ä—É–ø–ø—ã
            show_group_selection(message.chat.id)
            return

@bot.message_handler(func=lambda message: message.text == "–ù–∞–∑–∞–¥")
def go_back(message):
    show_group_selection(message.chat.id)

@bot.message_handler(commands=['view'])
def view_data(message):
    user_id = message.from_user.id
    data = "\n".join([f"{group}:\n" + "\n".join([f"{student}: {value}" for student, value in students.items()]) for group, students in students_data.items()])
    
    if user_id == ADMIN_ID:
        bot.send_message(message.chat.id, f"–í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π.\n\n–î–∞–Ω–Ω—ã–µ —É—á–µ–Ω–∏–∫–æ–≤:\n{data}")
    else:
        bot.send_message(message.chat.id, f"–î–∞–Ω–Ω—ã–µ —É—á–µ–Ω–∏–∫–æ–≤:\n{data}")

@bot.message_handler(commands=['set'])
def set_data(message):
    user_id = message.from_user.id
    if user_id != ADMIN_ID:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.")
        return

    args = message.text.split()[1:]  # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    if len(args) != 3:
        bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /set <–≥—Ä—É–ø–ø–∞> <–∏–º—è —É—á–µ–Ω–∏–∫–∞> <–Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ>")
        return

    group_name, student_name, new_value = args[0], args[1], args[2]

    if group_name in students_data and student_name in students_data[group_name]:
        try:
            students_data[group_name][student_name] = int(new_value)
            bot.send_message(message.chat.id, f"–ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {student_name} –≤ –≥—Ä—É–ø–ø–µ {group_name} –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {new_value}.")
        except ValueError:
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
    else:
        bot.send_message(message.chat.id, "–£—á–µ–Ω–∏–∫ –∏–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

@bot.message_handler(func=lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–∞")
def add_student(message):
    user_id = message.from_user.id
    if user_id != ADMIN_ID:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–æ–≤.")
        return

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /add <–≥—Ä—É–ø–ø–∞> <–∏–º—è —É—á–µ–Ω–∏–∫–∞> <–Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ>")

@bot.message_handler(commands=['add'])
def process_add_student(message):
    user_id = message.from_user.id
    if user_id != ADMIN_ID:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–æ–≤.")
        return

    args = message.text.split()[1:]  # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    if len(args) != 3:
        bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add <–≥—Ä—É–ø–ø–∞> <–∏–º—è —É—á–µ–Ω–∏–∫–∞> <–Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ>")
        return

    group_name, student_name, initial_value = args[0], args[1], args[2]

    if group_name in students_data:
        if student_name not in students_data[group_name]:
            try:
                # –î–æ–±–∞–≤–ª—è–µ–º —É—á–µ–Ω–∏–∫–∞ —Å –Ω–∞—á–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
                students_data[group_name][student_name] = int(initial_value)
                bot.send_message(message.chat.id, f"–£—á–µ–Ω–∏–∫ {student_name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É {group_name} —Å –Ω–∞—á–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º {initial_value}.")
            except ValueError:
                bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è.")
        else:
            bot.send_message(message.chat.id, "–≠—Ç–æ—Ç —É—á–µ–Ω–∏–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –≥—Ä—É–ø–ø–µ.")
    else:
        bot.send_message(message.chat.id, "–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

@bot.message_handler(commands=['help'])
def help(message):
    bot.send_message(message.from_user.id,'–í –±–æ—Ç–µ –µ—Å—Ç—å –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø –∞ —Ç–∞–∫ –∂–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∫–∞–∫ –≤–æ–π—Ç–∏ –≤ –∞–ª–≥–æ—Ä–∏—Ç–º–∏–∫—É',parse_mode='Markdown')
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True) #—Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
    btn4 = types.KeyboardButton('–í –Ω–∞—á–∞–ª–æ')
    btn5 = types.KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥—É')
    markup.add(btn4, btn5)
    bot.send_message(message.from_user.id, '‚ùì –ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç', reply_markup=markup) #–æ—Ç–≤–µ—Ç –±–æ—Ç–∞

@bot.message_handler(commands = ['switch'])
def switch(message):
    markup = types.InlineKeyboardMarkup()
    switch_button = types.InlineKeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥—É', switch_inline_query="–ê–ª–≥–æ—Ä–∏—Ç–º–∏–∫–∞_–ë–æ—Ç")
    markup.add(switch_button)
    bot.send_message(message.chat.id, "–í—ã–±—Ä–∞—Ç—å –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å", reply_markup = markup)


@bot.message_handler(commands = ['url'])
def url(message):
    markup = types.InlineKeyboardMarkup()
    btn_my_site= types.InlineKeyboardButton(text='–í—Ö–æ–¥ –≤ –ê–ª–≥–æ—Ä–∏—Ç–º–∏–∫—É', url='https://learn.algoritmika.org/login/')
    markup.add(btn_my_site)
    bot.send_message(message.chat.id, "üíª–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –ø–µ—Ä–µ–π–¥–∏ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç.", reply_markup = markup)

@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    if message.text == 'üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True) #—Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
        btn1 = types.KeyboardButton('–ù–∞—à–∏ –∫—É—Ä—Å—ã')
        btn2 = types.KeyboardButton('üíª–ö–∞–∫ –∑–∞–π—Ç–∏ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä—É –ê–ª–≥–æ—Ä–∏—Ç–º–∏–∫–∞')
        btn3 = types.InlineKeyboardButton('‚≠ê–ê—Å—Ç—Ä–æ–∫–æ–∏–Ω—ã –¥–µ—Ç–µ–π')
        btn4 = types.KeyboardButton('–í –Ω–∞—á–∞–ª–æ')
        btn5 = types.KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥—É')
        markup.add(btn1, btn2, btn3, btn4, btn5)
        bot.send_message(message.from_user.id, '‚ùì –ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç', reply_markup=markup) #–æ—Ç–≤–µ—Ç –±–æ—Ç–∞
        

    elif message.text == '–ù–∞—à–∏ –∫—É—Ä—Å—ã':
        bot.send_message(message.from_user.id, '–£ –Ω–∞—Å –µ—Å—Ç—å –∫—É—Ä—Å—ã –ø–æ —Ç–∞–∫–∏–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è–º –∫–∞–∫:')
        markup = types.InlineKeyboardMarkup()
        start_keyboard = types.InlineKeyboardMarkup()
        menu = types.InlineKeyboardButton(text="—Ñ–æ—Ç–æ", callback_data='men')
        start_keyboard.add(menu)
        bot.send_message(message.chat.id, "–ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ", reply_markup=start_keyboard)  

        btn1= types.InlineKeyboardButton('–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –î–∏–∑–∞–π–Ω', url='https://learn.algoritmika.org/login/')
        btn2= types.InlineKeyboardButton('–û–ª–∏–ø', url='https://learn.algoritmika.org/login/')
        btn3= types.InlineKeyboardButton('–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å', url='https://learn.algoritmika.org/login/')
        btn4= types.InlineKeyboardButton('–í–∏–∑—É–∞–ª—å–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–µ', url='https://learn.algoritmika.org/login/')
        btn5= types.InlineKeyboardButton('–ì–µ–π–º –î–∏–∑–∞–π–Ω', url='https://learn.algoritmika.org/login/')
        btn5= types.InlineKeyboardButton('Unity', url='https://learn.algoritmika.org/login/')
        btn6= types.InlineKeyboardButton('–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞', url='https://learn.algoritmika.org/login/')
        btn7= types.InlineKeyboardButton('Python', url='https://learn.algoritmika.org/login/')
        markup.add(btn1, btn2,btn3,btn4,btn5,btn6,btn7)
        bot.send_message(message.chat.id, "üíª–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –ø–µ—Ä–µ–π–¥–∏ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç.", reply_markup = markup)

    elif message.text == 'üíª–ö–∞–∫ –∑–∞–π—Ç–∏ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä—É –ê–ª–≥–æ—Ä–∏—Ç–º–∏–∫–∞':
        bot.send_message(message.from_user.id, '–î–æ–±—Ä—ã–π –¥–µ–Ω—å, —É–≤–∞–∂–∞–µ–º—ã–µ —Ä–æ–¥–∏—Ç–µ–ª–∏!  –†–µ–±—è—Ç–∞ –ø–æ–ø—Ä–æ—Å–∏–ª–∏ —á—Ç–æ–±—ã —è —Å–∫–∏–Ω—É–ª –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∫–∞–∫ –∑–∞—Ö–æ–¥–∏—Ç—å –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–æ–º–∞. –ù–∞–ø—Ä–∞–≤–ª—è—é –≤–∞–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–≥–æ, —á—Ç–æ –º—ã —Å —Ä–µ–±—è—Ç–∞–º–∏ –ø—Ä–æ—Ö–æ–¥–∏–º –Ω–∞ —É—Ä–æ–∫–∞—Ö:\n 1.‚Å†‚Å†–í –ª—é–±–æ–º –±—Ä–∞—É–∑–µ—Ä–µ –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ ¬´–ê–ª–≥–æ—Ä–∏—Ç–º–∏–∫–∞ –≤—Ö–æ–¥¬ª. learn.algoritmika.org - –ø–µ—Ä–≤—ã–º –±—É–¥–µ—Ç —Ç–∞–∫–∞—è —Å—Å—ã–ª–∫–∞, –≤–∞–º –Ω—É–∂–Ω–æ –∑–∞–π—Ç–∏ –ø–æ –Ω–µ–π\n 2.‚Å†‚Å†–í—ã –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –ê–ª–≥–æ—Ä–∏—Ç–º–∏–∫–∏;\n 3.‚Å†‚Å†‚Å†–î–∞–ª–µ–µ –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å. –ö—Ç–æ –Ω–µ –∑–Ω–∞–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è - —è –ø—Ä–∏—à–ª—é –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å;\n 4.‚Å†‚Å†‚Å†–ó–∞—Ç–µ–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–π—Ç–∏ –≤–æ –≤–∫–ª–∞–¥–∫—É –∫—É—Ä—Å;\n \n5.‚Å†‚Å†–í—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ä–µ–±–µ–Ω–∫–∞ —É –≤–∞—Å –ø–µ—Ä–µ–¥ –≥–ª–∞–∑–∞–º–∏. ', parse_mode='Markdown')
        url(message)
    elif message.text == '‚≠ê–ê—Å—Ç—Ä–æ–∫–æ–∏–Ω—ã –¥–µ—Ç–µ–π':
        start_command(message)
        
    elif message.text == '–í –Ω–∞—á–∞–ª–æ':
        start(message)
    elif message.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥—É':
        switch(message)
    elif message.text == '–ü–æ–º–æ—â—å':
        help(message)


bot.polling(none_stop=True, interval=0) #–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ —á–∞—Å—Ç—åmport telebot
